--- noop-iosched.c	2019-11-26 17:58:30.342255867 -0500
+++ clook-iosched.c	2019-11-26 18:43:16.841178994 -0500
@@ -1,5 +1,5 @@
 /*
- * elevator noop
+ * elevator clook
  */
 #include <linux/blkdev.h>
 #include <linux/elevator.h>
@@ -8,41 +8,58 @@
 #include <linux/slab.h>
 #include <linux/init.h>
 
-struct noop_data {
-	struct list_head queue;
+//char rW = 'R';
+
+struct clook_data {
+	struct list_head queue; //List of pending requests
 };
 
-static void noop_merged_requests(struct request_queue *q, struct request *rq,
+static void clook_merged_requests(struct request_queue *q, struct request *rq,
 				 struct request *next)
 {
-	list_del_init(&next->queuelist);
+//request * Pointer to descriptor of the request in the queue to be considered 
+//1st for possible merging
+	list_del_init(&next->queuelist);//elt to del from list
 }
 
-static int noop_dispatch(struct request_queue *q, int force)
+static int clook_dispatch(struct request_queue *q, int force)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct clook_data *nd = q->elevator->elevator_data;
 
-	if (!list_empty(&nd->queue)) {
+	if (!list_empty(&nd->queue)) {//Dispatches 1 request unless empty
 		struct request *rq;
 		rq = list_entry(nd->queue.next, struct request, queuelist);
+		//get struct for this entry
 		list_del_init(&rq->queuelist);
+		//printk("[CLOOK] dsp [%c] [%lu]", rW, blk_rq_pos(rq)); 
 		elv_dispatch_sort(q, rq);
+		char rW = (rq_data_dir(rq) & REQ_WRITE) ? 'W' : 'R';
+		printk("[CLOOK] dsp <%c> <%lu>\n", rW, blk_rq_pos(rq));
 		return 1;
 	}
 	return 0;
 }
 
-static void noop_add_request(struct request_queue *q, struct request *rq)
+static void clook_add_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
-
-	list_add_tail(&rq->queuelist, &nd->queue);
+	struct clook_data *nd = q->elevator->elevator_data;
+	struct list_head *head = NULL; //use as the initial head position
+	
+	//elv_add_request(&rq->queuelist, &nd->queue);
+	list_for_each(head, &nd->queue){
+		if(rq_end_sector(list_entry(head, struct request, queuelist)) > rq_end_sector(rq)){
+			break;
+		}
+	}
+	list_add_tail(&rq->queuelist, head);//Add request to the end
+	char rW = (rq_data_dir(rq) & REQ_WRITE) ? 'W' : 'R';
+	printk("[CLOOK] add <%c> <%lu>\n", rW, blk_rq_pos(rq));
 }
 
 static struct request *
-noop_former_request(struct request_queue *q, struct request *rq)
+clook_former_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct clook_data *nd = q->elevator->elevator_data;
 
 	if (rq->queuelist.prev == &nd->queue)
 		return NULL;
@@ -50,64 +67,66 @@
 }
 
 static struct request *
-noop_latter_request(struct request_queue *q, struct request *rq)
+clook_latter_request(struct request_queue *q, struct request *rq)
 {
-	struct noop_data *nd = q->elevator->elevator_data;
+	struct clook_data *nd = q->elevator->elevator_data;
 
 	if (rq->queuelist.next == &nd->queue)
 		return NULL;
 	return list_entry(rq->queuelist.next, struct request, queuelist);
 }
 
-static int noop_init_queue(struct request_queue *q)
+static int clook_init_queue(struct request_queue *q)
 {
-	struct noop_data *nd;
+	struct clook_data *nd;
 
 	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
 	if (!nd)
 		return -ENOMEM;
 
 	INIT_LIST_HEAD(&nd->queue);
-	q->elevator->elevator_data = nd;
+	//q->elevator->elevator_data = nd;
 	return 0;
 }
 
-static void noop_exit_queue(struct elevator_queue *e)
+static void clook_exit_queue(struct elevator_queue *e)
 {
-	struct noop_data *nd = e->elevator_data;
+	struct clook_data *nd = e->elevator_data;
 
 	BUG_ON(!list_empty(&nd->queue));
 	kfree(nd);
 }
 
-static struct elevator_type elevator_noop = {
+static struct elevator_type elevator_clook = {
 	.ops = {
-		.elevator_merge_req_fn		= noop_merged_requests,
-		.elevator_dispatch_fn		= noop_dispatch,
-		.elevator_add_req_fn		= noop_add_request,
-		.elevator_former_req_fn		= noop_former_request,
-		.elevator_latter_req_fn		= noop_latter_request,
-		.elevator_init_fn		= noop_init_queue,
-		.elevator_exit_fn		= noop_exit_queue,
+		.elevator_merge_req_fn		= clook_merged_requests,
+		.elevator_dispatch_fn		= clook_dispatch,
+		.elevator_add_req_fn		= clook_add_request,
+		.elevator_former_req_fn		= clook_former_request,
+		.elevator_latter_req_fn		= clook_latter_request,
+		.elevator_init_fn		= clook_init_queue,
+		.elevator_exit_fn		= clook_exit_queue,
 	},
-	.elevator_name = "noop",
+	.elevator_name = "clook",
 	.elevator_owner = THIS_MODULE,
 };
 
-static int __init noop_init(void)
-{
-	return elv_register(&elevator_noop);
+static int __init clook_init(void){
+	elv_register(&elevator_clook);
+	return 0;
 }
 
-static void __exit noop_exit(void)
-{
-	elv_unregister(&elevator_noop);
-}
+static void __exit clook_exit(void){elv_unregister(&elevator_clook);}
+
+//static void clook_add(void, void){elv_add_request(&elevator_clook);}
+
+//static int clook_dsp(void, int){elv_drain_elevator(&elevator_clook);}
 
-module_init(noop_init);
-module_exit(noop_exit);
+module_init(clook_init);
+//module_add(clook_add);
+module_exit(clook_exit);
 
 
-MODULE_AUTHOR("Jens Axboe");
+MODULE_AUTHOR("Mareo Yapp");
 MODULE_LICENSE("GPL");
-MODULE_DESCRIPTION("No-op IO scheduler");
+MODULE_DESCRIPTION("Clook IO scheduler");
